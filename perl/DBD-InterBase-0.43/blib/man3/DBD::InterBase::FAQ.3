.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBD::InterBase::FAQ 3"
.TH DBD::InterBase::FAQ 3 "2004-02-25" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
FAQ \- The Frequently Asked Questions for \f(CW\*(C`DBD::InterBase\*(C'\fR
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
perldoc DBD::InterBase::FAQ
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document serves to answer the most frequently asked questions
regarding the uses of \f(CW\*(C`DBD::InterBase\*(C'\fR. Current version refers to
\&\f(CW\*(C`DBD::InterBase\*(C'\fR version 0.43 available on SourceForge.
.SH "SQL Operations"
.IX Header "SQL Operations"
.Sh "Why do some operations performing positioned update and delete fail when AutoCommit is on?"
.IX Subsection "Why do some operations performing positioned update and delete fail when AutoCommit is on?"
For example, the following code snippet fails:
.PP
.Vb 7
\& $sth = $dbh->prepare(
\& "SELECT * FROM ORDERS WHERE user_id < 5 FOR UPDATE OF comment");
\& $sth->execute;
\& while (@res = $sth->fetchrow_array) {
\&     $dbh->do("UPDATE ORDERS SET comment = 'Wonderful' WHERE 
\&     CURRENT OF $sth->{CursorName}");
\& }
.Ve
.PP
When \fBAutoCommit is on\fR, a transaction is started within \fIprepare()\fR, and
committed automatically after the last \fIfetch()\fR, or within \fIfinish()\fR. Within
\&\fIdo()\fR, a transaction is started right before the statement is executed, and
gets committed right after the statement is executed. The transaction handle
is stored within the database handle. The driver is smart enough not to
override an active transaction handle with a new one. So, if you notice the
snippet above, after the first \fIfetchrow_array()\fR, the \fIdo()\fR is still using the
same transaction context, but as soon as it has finished executing the statement, it
\&\fBcommits\fR the transaction, whereas the next \fIfetchrow_array()\fR still needs
the transaction context!
.PP
So the secret to make this work is \fBto keep the transaction open\fR. This can be
done in two ways:
.IP "\(bu Using AutoCommit = 0" 4
.IX Item "Using AutoCommit = 0"
If yours is default to AutoCommit on, you can put the snippet within a block:
.Sp
.Vb 5
\& {
\&     $dbh->{AutoCommit} = 0;
\&     # same actions like above ....
\&     $dbh->commit;
\& }
.Ve
.ie n .IP "\(bu Using $dbh\->{ib_softcommit} = 1" 4
.el .IP "\(bu Using \f(CW$dbh\fR\->{ib_softcommit} = 1" 4
.IX Item "Using $dbh->{ib_softcommit} = 1"
This driver-specific attribute is available as of version 0.30. You may want
to look at t/40cursoron.t to see it in action.
.Sh "Nested statement handles break under AutoCommit mode."
.IX Subsection "Nested statement handles break under AutoCommit mode."
The same explanation as above applies. The workaround is also
much alike:
.PP
.Vb 5
\& {
\&     $dbh->{AutoCommit} = 0;
\&     $sth1 = $dbh->prepare("SELECT * FROM $table");
\&     $sth2 = $dbh->prepare("SELECT * FROM $table WHERE id = ?");
\&     $sth1->execute;
.Ve
.PP
.Vb 6
\&     while ($row = $sth1->fetchrow_arrayref) {
\&        $sth2->execute($row->[0]);
\&        $res = $sth2->fetchall_arrayref;
\&     }
\&     $dbh->commit;
\& }
.Ve
.PP
You may also use \f(CW$dbh\fR\->{ib_softcommit} introduced in version 0.30, please consult
t/70nestedon.t for an example on how to use it.
.Sh "Why do placeholders fail to bind, generating unknown datatype error message?"
.IX Subsection "Why do placeholders fail to bind, generating unknown datatype error message?"
You can't bind a field name. The following example will fail:
.PP
.Vb 2
\& $sth = $dbh->prepare("SELECT (?) FROM $table");
\& $sth->execute('user_id');
.Ve
.PP
There are cases where placeholders can't be used in conjunction with \s-1COLLATE\s0
clause, such as this:
.PP
.Vb 1
\& SELECT * FROM $table WHERE UPPER(author) LIKE UPPER(? COLLATE FR_CA);
.Ve
.PP
This deals with the InterBase's \s-1SQL\s0 parser, not with \f(CW\*(C`DBD::InterBase\*(C'\fR. The
driver just passes \s-1SQL\s0 statements through the engine.
.Sh "How to do automatic increment for a specific field?"
.IX Subsection "How to do automatic increment for a specific field?"
Create a generator and a trigger to associate it with the field. The
following example creates a generator named \s-1PROD_ID_GEN\s0, and a trigger for
table \s-1ORDERS\s0 which uses the generator to perform auto increment on field
\&\s-1PRODUCE_ID\s0 with increment size of 1.
.PP
.Vb 7
\& $dbh->do("CREATE GENERATOR PROD_ID_GEN");
\& $dbh->do(
\& "CREATE TRIGGER INC_PROD_ID FOR ORDERS
\& BEFORE INSERT POSITION 0
\& AS BEGIN
\&   NEW.PRODUCE_ID = GEN_ID(PROD_ID_GEN, 1);
\& END");
.Ve
.Sh "How can I perform \s-1LIMIT\s0 clause as I usually do in MySQL?"
.IX Subsection "How can I perform LIMIT clause as I usually do in MySQL?"
\&\f(CW\*(C`LIMIT\*(C'\fR clause let users to fetch only a portion rather than the whole 
records as the result of a query. This is particularly efficient and useful 
for paging feature on web pages, where users can navigate back and forth 
between pages. 
.PP
Using InterBase (Firebird is explained later), this can be emulated by writing a
stored procedure. For example, to display a portion of table_forum, first create 
the following procedure:
.PP
.Vb 17
\& CREATE PROCEDURE PAGING_FORUM (start INTEGER, num INTEGER)
\& RETURNS (id INTEGER, title VARCHAR(255), ctime DATE, author VARCHAR(255))
\& AS 
\& DECLARE VARIABLE counter INTEGER;
\& BEGIN
\&   counter = 0;
\&   FOR SELECT id, title, ctime, author FROM table_forum ORDER BY ctime
\&      INTO :id, :title, :ctime, :author
\&   DO
\&   BEGIN
\&      IF (counter = :start + :num) THEN EXIT;
\&      ELSE
\&         IF (counter >= :start) THEN SUSPEND;
\&      counter = counter + 1;          
\&   END
\& END !!
\& SET TERM ; !!
.Ve
.PP
And within your application:
.PP
.Vb 2
\& # fetch record 1 - 5:
\& $res = $dbh->selectall_arrayref("SELECT * FROM paging_forum(0,5)");
.Ve
.PP
.Vb 2
\& # fetch record 6 - 10: 
\& $res = $dbh->selectall_arrayref("SELECT * FROM paging_forum(5,5)");
.Ve
.PP
But never expect this to work:
.PP
.Vb 3
\& $sth = $dbh->prepare(
\& "EXECUTE PROCEDURE paging_forum(5,5) RETURNING_VALUES :id, :title, :ctime, 
\& :author");
.Ve
.PP
With Firebird 1 RCx and later, you can use \f(CW\*(C`SELECT FIRST\*(C'\fR:
.PP
.Vb 1
\& SELECT FIRST 10 SKIP 30 * FROM table_forum;
.Ve
.PP
\&\f(CW\*(C`FIRST x\*(C'\fR and \f(CW\*(C`SKIP x\*(C'\fR are both optional. \f(CW\*(C`FIRST\*(C'\fR limits the number of
rows to return, \f(CW\*(C`SKIP\*(C'\fR should be self\-explanatory.
.SH "Uses of attributes"
.IX Header "Uses of attributes"
.Sh "How can I use the date/time formatting attributes?"
.IX Subsection "How can I use the date/time formatting attributes?"
Those attributes take the same format as the C function \fIstrftime()\fR's.
Examples:
.PP
.Vb 5
\& $attr = {
\&    ib_timestampformat => '%m-%d-%Y %H:%M',
\&    ib_dateformat => '%m-%d-%Y',
\&    ib_timeformat => '%H:%M',
\& };
.Ve
.PP
Then, pass it to \fIprepare()\fR method. 
.PP
.Vb 2
\& $sth = $dbh->prepare($stmt, $attr);
\& # followed by execute() and fetch(), or:
.Ve
.PP
.Vb 1
\& $res = $dbh->selectall_arrayref($stmt, $attr);
.Ve
.Sh "Can I set the date/time formatting attributes between prepare and fetch?"
.IX Subsection "Can I set the date/time formatting attributes between prepare and fetch?"
No. \f(CW\*(C`ib_dateformat\*(C'\fR, \f(CW\*(C`ib_timeformat\*(C'\fR, and \f(CW\*(C`ib_timestampformat\*(C'\fR can only
be set during \f(CW$sth\fR\->prepare. If this is a problem to you, let me know, and
probably I'll add this capability for the next release.
.Sh "Can I change ib_dialect after \s-1DBI\-\s0>connect ?"
.IX Subsection "Can I change ib_dialect after DBI->connect ?"
No. If this is a problem to you, let me know, and probably I'll add this 
capability for the next release.
.Sh "Why do \fIexecute()\fP, \fIdo()\fP method and \fIrows()\fP method always return \-1 upon a successful operation?"
.IX Subsection "Why do execute(), do() method and rows() method always return -1 upon a successful operation?"
Incorrect question. \f(CW$sth\fR\->rows returns the number of fetched rows after a
successful \s-1SELECT\s0. Starting from version 0.43, \fIexecute()\fR method returns the
number of affected rows. But it's true that \fIdo()\fR method returns \-1, this
will change in future release.
.SH "Sources for Help"
.IX Header "Sources for Help"
.Sh "I can't find the answer for my question here, where should I direct my question?"
.IX Subsection "I can't find the answer for my question here, where should I direct my question?"
For questions regarding InterBase itself, you can join the InterBase mailing
list at http://groups.yahoo.com/group/ib\-support/, or if it is not enough, I
believe there are some commercial supports available out there.
http://www.ibphoenix.com/ is a good place to check.
.PP
For questions about \f(CW\*(C`DBD::InterBase\*(C'\fR, try to look for the answer on \f(CW\*(C`DBI\*(C'\fR
man page, and \f(CW\*(C`DBI::FAQ\*(C'\fR. If your question is still unanswered, you can
drop me message or you can post your question to the \s-1DBI\s0 users mailing list.
.SH "The Development Project"
.IX Header "The Development Project"
.Sh "How can I join the development project?"
.IX Subsection "How can I join the development project?"
The project is hosted at sourceforge.net. So send me your sourceforge
username, and let me know what areas you are interested in. 
.PP
SourceForge.net project page: http://sourceforge.net/projects/dbi\-interbase/
.Sh "Where can I get the latest release of DBD::InterBase ?"
.IX Subsection "Where can I get the latest release of DBD::InterBase ?"
http://dbi.interbase.or.id/ (stable and development release), and 
http://www.cpan.org/modules/by\-module/DBD/ (stable release only).
.SH "AUTHORS AND COPYRIGHT"
.IX Header "AUTHORS AND COPYRIGHT"
Copyright (C) 2000\-2004, Edwin Pratomo \fIedpratomo@cpan.org\fR. Daniel Ritz
\&\fIdaniel.ritz@gmx.ch\fR also writes necessary updates.
.PP
Michael Samanov \fIsamanov@yahoo.com\fR contributed some important correction.
