.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "InterBase 3"
.TH InterBase 3 "2004-02-25" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
DBD::InterBase \- DBI driver for Firebird and InterBase RDBMS server
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use DBI;
.Ve
.PP
.Vb 1
\&  $dbh = DBI->connect("dbi:InterBase:db=$dbname", "sysdba", "masterkey");
.Ve
.PP
.Vb 1
\&  # See the DBI module documentation for full details
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBD::InterBase is a Perl module which works with the \s-1DBI\s0 module to provide
access to Firebird and InterBase databases.
.SH "MODULE DOCUMENTATION"
.IX Header "MODULE DOCUMENTATION"
This documentation describes driver specific behavior and restrictions. 
It is not supposed to be used as the only reference for the user. In any 
case consult the \s-1DBI\s0 documentation first !
.SH "THE DBI CLASS"
.IX Header "THE DBI CLASS"
.Sh "\s-1DBI\s0 Class Methods"
.IX Subsection "DBI Class Methods"
.IP "\fBconnect\fR" 4
.IX Item "connect"
To connect to a database with a minimum of parameters, use the 
following syntax: 
.Sp
.Vb 1
\&  $dbh = DBI->connect("dbi:InterBase:dbname=$dbname", "sysdba", "masterkey");
.Ve
.Sp
This connects to the database \f(CW$dbname\fR at localhost as \s-1SYSDBA\s0 user with the
default password. 
.Sp
Multiline \s-1DSN\s0 is acceptable. Here is an example of connect statement which uses all 
possible parameters: 
.Sp
.Vb 9
\&   $dsn =<< "DSN";
\& dbi:InterBase:dbname=$dbname;
\& host=$host;
\& port=$port;
\& ib_dialect=$dialect;
\& ib_role=$role;
\& ib_charset=$charset;
\& ib_cache=$cache
\& DSN
.Ve
.Sp
.Vb 1
\& $dbh =  DBI->connect($dsn, $username, $password);
.Ve
.Sp
The \f(CW$dsn\fR is prefixed by 'dbi:InterBase:', and consists of key-value
parameters separated by \fBsemicolons\fR. New line may be added after the
semicolon. The following is the list of valid parameters and their
respective meanings:
.Sp
.Vb 11
\&    parameter   meaning                             optional?
\&    ---------------------------------------------------------
\&    database    path to the database                required
\&    dbname      path to the database
\&    db          path to the database
\&    host        hostname (not IP address)           optional
\&    port        port number                         optional
\&    ib_dialect  the SQL dialect to be used          optional
\&    ib_role     the role of the user                optional
\&    ib_charset  character set to be used            optional
\&    ib_cache    number of database cache buffers    optional
.Ve
.Sp
\&\fBdatabase\fR could be used interchangebly with \fBdbname\fR and \fBdb\fR. 
To connect to a remote host, use the \fBhost\fR parameter. 
Here is an example of \s-1DSN\s0 to connect to a remote Windows host:
.Sp
.Vb 1
\& $dsn = "dbi:InterBase:db=C:/temp/test.gdb;host=rae.cumi.org;ib_dialect=3";
.Ve
.Sp
Firebird as of version 1.0 listens on port specified within the services
file. To connect to port other than the default 3050, add the port number at
the end of host name, separated by a slash. Example:
.Sp
.Vb 1
\& $dsn = 'dbi:InterBase:db=/data/test.gdb;host=localhost/3060';
.Ve
.Sp
InterBase 6.0 introduces \fB\s-1SQL\s0 dialect\fR to provide backward compatibility with
databases created by older versions of InterBase. In short, \s-1SQL\s0 dialect
controls how InterBase interprets:
.Sp
.Vb 4
\& - double quotes
\& - the DATE datatype
\& - decimal and numeric datatypes
\& - new 6.0 reserved keywords
.Ve
.Sp
Valid values for \fBib_dialect\fR are 1, 2, and 3. The driver's default value is
1. 
.Sp
\&\fBib_role\fR specifies the role of the connecting user. \fB\s-1SQL\s0 role\fR is
implemented by InterBase to make database administration easier when dealing
with lots of users. A detailed reading can be found at:
.Sp
.Vb 1
\& http://www.ibphoenix.com/ibp_sqlroles.html
.Ve
.Sp
If \fBib_cache\fR is not specified, the default database's cache size value will be 
used. The InterBase Operation Guide discusses in full length the importance of 
this parameter to gain the best performance.
.IP "\fBavailable_drivers\fR" 4
.IX Item "available_drivers"
.Vb 1
\&  @driver_names = DBI->available_drivers;
.Ve
.Sp
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBdata_sources\fR" 4
.IX Item "data_sources"
This method is not yet implemented.
.IP "\fBtrace\fR" 4
.IX Item "trace"
.Vb 1
\&  DBI->trace($trace_level, $trace_file)
.Ve
.Sp
Implemented by \s-1DBI\s0, no driver-specific impact.
.Sh "\s-1DBI\s0 Dynamic Attributes"
.IX Subsection "DBI Dynamic Attributes"
See Common Methods. 
.SH "METHODS COMMON TO ALL DBI HANDLES"
.IX Header "METHODS COMMON TO ALL DBI HANDLES"
.IP "\fBerr\fR" 4
.IX Item "err"
.Vb 1
\&  $rv = $h->err;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBerrstr\fR" 4
.IX Item "errstr"
.Vb 1
\&  $str = $h->errstr;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBstate\fR" 4
.IX Item "state"
This method is not yet implemented.
.IP "\fBtrace\fR" 4
.IX Item "trace"
.Vb 1
\&  $h->trace($trace_level, $trace_filename);
.Ve
.Sp
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBtrace_msg\fR" 4
.IX Item "trace_msg"
.Vb 1
\&  $h->trace_msg($message_text);
.Ve
.Sp
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBfunc\fR" 4
.IX Item "func"
See \fBTransactions\fR section for information about invoking \f(CW\*(C`ib_set_tx_param()\*(C'\fR
from \fIfunc()\fR method.
.SH "ATTRIBUTES COMMON TO ALL DBI HANDLES"
.IX Header "ATTRIBUTES COMMON TO ALL DBI HANDLES"
.IP "\fBWarn\fR (boolean, inherited)" 4
.IX Item "Warn (boolean, inherited)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBActive\fR (boolean, read\-only)" 4
.IX Item "Active (boolean, read-only)"
Supported by the driver as proposed by \s-1DBI\s0. A database 
handle is active while it is connected and  statement 
handle is active until it is finished. 
.IP "\fBKids\fR (integer, read\-only)" 4
.IX Item "Kids (integer, read-only)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBActiveKids\fR (integer, read\-only)" 4
.IX Item "ActiveKids (integer, read-only)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBCachedKids\fR (hash ref)" 4
.IX Item "CachedKids (hash ref)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBCompatMode\fR (boolean, inherited)" 4
.IX Item "CompatMode (boolean, inherited)"
Not used by this driver. 
.IP "\fBInactiveDestroy\fR (boolean)" 4
.IX Item "InactiveDestroy (boolean)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBPrintError\fR (boolean, inherited)" 4
.IX Item "PrintError (boolean, inherited)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBRaiseError\fR (boolean, inherited)" 4
.IX Item "RaiseError (boolean, inherited)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBChopBlanks\fR (boolean, inherited)" 4
.IX Item "ChopBlanks (boolean, inherited)"
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBLongReadLen\fR (integer, inherited)" 4
.IX Item "LongReadLen (integer, inherited)"
Supported by the driver as proposed by \s-1DBI\s0.The default value is 80 bytes. 
.IP "\fBLongTruncOk\fR (boolean, inherited)" 4
.IX Item "LongTruncOk (boolean, inherited)"
Supported by the driver as proposed by \s-1DBI\s0.
.IP "\fBTaint\fR (boolean, inherited)" 4
.IX Item "Taint (boolean, inherited)"
Implemented by \s-1DBI\s0, no driver-specific impact.
.SH "DATABASE HANDLE OBJECTS"
.IX Header "DATABASE HANDLE OBJECTS"
.Sh "Database Handle Methods"
.IX Subsection "Database Handle Methods"
.IP "\fBselectrow_array\fR" 4
.IX Item "selectrow_array"
.Vb 1
\&  @row_ary = $dbh->selectrow_array($statement, \e%attr, @bind_values);
.Ve
.Sp
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBselectall_arrayref\fR" 4
.IX Item "selectall_arrayref"
.Vb 1
\&  $ary_ref = $dbh->selectall_arrayref($statement, \e%attr, @bind_values);
.Ve
.Sp
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBselectcol_arrayref\fR" 4
.IX Item "selectcol_arrayref"
.Vb 1
\&  $ary_ref = $dbh->selectcol_arrayref($statement, \e%attr, @bind_values);
.Ve
.Sp
Implemented by \s-1DBI\s0, no driver-specific impact.
.IP "\fBprepare\fR" 4
.IX Item "prepare"
.Vb 1
\&  $sth = $dbh->prepare($statement, \e%attr);
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0.
When AutoCommit is On, this method implicitly starts a new transaction,
which will be automatically committed after the following \fIexecute()\fR or the
last \fIfetch()\fR, depending on the statement type. For select statements,
commit automatically takes place after the last \fIfetch()\fR, or by explicitly 
calling \fIfinish()\fR method if there are any rows remaining. For non-select
statements, \fIexecute()\fR will implicitly commits the transaction. 
.IP "\fBprepare_cached\fR" 4
.IX Item "prepare_cached"
.Vb 1
\&  $sth = $dbh->prepare_cached($statement, \e%attr);
.Ve
.Sp
Implemented by \s-1DBI\s0, no driver-specific impact. 
.IP "\fBdo\fR" 4
.IX Item "do"
.Vb 1
\&  $rv  = $dbh->do($statement, \e%attr, @bind_values);
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0.
This should be used for non-select statements, where the driver doesn't take
the conservative prepare \- execute steps, thereby speeding up the execution
time. But if this method is used with bind values, the speed advantage
diminishes as this method calls \fIprepare()\fR for binding the placeholders.
Instead of calling this method repeatedly with bind values, it would be
better to call \fIprepare()\fR once, and \fIexecute()\fR many times.
.Sp
See the notes for the execute method elsewhere in this document. Unlike the
execute method, currently this method doesn't return the number of affected
rows. 
.IP "\fBcommit\fR" 4
.IX Item "commit"
.Vb 1
\&  $rc  = $dbh->commit;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. See also the 
notes about \fBTransactions\fR elsewhere in this document. 
.IP "\fBrollback\fR" 4
.IX Item "rollback"
.Vb 1
\&  $rc  = $dbh->rollback;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. See also the 
notes about \fBTransactions\fR elsewhere in this document. 
.IP "\fBdisconnect\fR" 4
.IX Item "disconnect"
.Vb 1
\&  $rc  = $dbh->disconnect;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBping\fR" 4
.IX Item "ping"
.Vb 1
\&  $rc = $dbh->ping;
.Ve
.Sp
This driver supports the ping\-method, which can be used to check the 
validity of a database\-handle. This is especially required by
\&\f(CW\*(C`Apache::DBI\*(C'\fR.
.IP "\fBtable_info\fR" 4
.IX Item "table_info"
.Vb 1
\&  $sth = $dbh->table_info;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBtables\fR" 4
.IX Item "tables"
.Vb 1
\&  @names = $dbh->tables;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBtype_info_all\fR" 4
.IX Item "type_info_all"
.Vb 1
\&  $type_info_all = $dbh->type_info_all;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.Sp
For further details concerning the InterBase specific data-types 
please read the \*(L"InterBase Data Definition Guide\*(R". 
.IP "\fBtype_info\fR" 4
.IX Item "type_info"
.Vb 1
\&  @type_info = $dbh->type_info($data_type);
.Ve
.Sp
Implemented by \s-1DBI\s0, no driver-specific impact. 
.IP "\fBquote\fR" 4
.IX Item "quote"
.Vb 1
\&  $sql = $dbh->quote($value, $data_type);
.Ve
.Sp
Implemented by \s-1DBI\s0, no driver-specific impact. 
.Sh "Database Handle Attributes"
.IX Subsection "Database Handle Attributes"
.IP "\fBAutoCommit\fR  (boolean)" 4
.IX Item "AutoCommit  (boolean)"
Supported by the driver as proposed by \s-1DBI\s0. According to the 
classification of \s-1DBI\s0, InterBase is a database, in which a 
transaction must be explicitly started. Without starting a 
transaction, every change to the database becomes immediately 
permanent. The default of AutoCommit is on, which corresponds 
to the \s-1DBI\s0's default. When setting AutoCommit to off, a transaction 
will be started and every commit or rollback 
will automatically start a new transaction. For details see the 
notes about \fBTransactions\fR elsewhere in this document. 
.IP "\fBDriver\fR  (handle)" 4
.IX Item "Driver  (handle)"
Implemented by \s-1DBI\s0, no driver-specific impact. 
.IP "\fBName\fR  (string, read\-only)" 4
.IX Item "Name  (string, read-only)"
Not yet implemented.
.IP "\fBRowCacheSize\fR  (integer)" 4
.IX Item "RowCacheSize  (integer)"
Implemented by \s-1DBI\s0, not used by the driver.
.IP "\fBib_softcommit\fR  (driver\-specific, boolean)" 4
.IX Item "ib_softcommit  (driver-specific, boolean)"
Set this attribute to \s-1TRUE\s0 to use InterBase's soft commit feature (default
to \s-1FALSE\s0). Soft commit retains the internal transaction handle when
committing a transaction, while the default commit behavior always closes
and invalidates the transaction handle.
.Sp
Since the transaction handle is still open, there is no need to start a new transaction 
upon every commit, so applications can gain performance improvement. Using soft commit is also 
desirable when dealing with nested statement handles under AutoCommit on. 
.Sp
Switching the attribute's value from \s-1TRUE\s0 to \s-1FALSE\s0 will force hard commit thus 
closing the current transaction. 
.SH "STATEMENT HANDLE OBJECTS"
.IX Header "STATEMENT HANDLE OBJECTS"
.Sh "Statement Handle Methods"
.IX Subsection "Statement Handle Methods"
.IP "\fBbind_param\fR" 4
.IX Item "bind_param"
Supported by the driver as proposed by \s-1DBI\s0. 
The \s-1SQL\s0 data type passed as the third argument is ignored. 
.IP "\fBbind_param_inout\fR" 4
.IX Item "bind_param_inout"
Not supported by this driver. 
.IP "\fBexecute\fR" 4
.IX Item "execute"
.Vb 1
\&  $rv = $sth->execute(@bind_values);
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBfetchrow_arrayref\fR" 4
.IX Item "fetchrow_arrayref"
.Vb 1
\&  $ary_ref = $sth->fetchrow_arrayref;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBfetchrow_array\fR" 4
.IX Item "fetchrow_array"
.Vb 1
\&  @ary = $sth->fetchrow_array;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBfetchrow_hashref\fR" 4
.IX Item "fetchrow_hashref"
.Vb 1
\&  $hash_ref = $sth->fetchrow_hashref;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBfetchall_arrayref\fR" 4
.IX Item "fetchall_arrayref"
.Vb 1
\&  $tbl_ary_ref = $sth->fetchall_arrayref;
.Ve
.Sp
Implemented by \s-1DBI\s0, no driver-specific impact. 
.IP "\fBfinish\fR" 4
.IX Item "finish"
.Vb 1
\&  $rc = $sth->finish;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBrows\fR" 4
.IX Item "rows"
.Vb 1
\&  $rv = $sth->rows;
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
It returns the number of \fBfetched\fR rows for select statements, otherwise
it returns \-1 (unknown number of affected rows).
.IP "\fBbind_col\fR" 4
.IX Item "bind_col"
.Vb 1
\&  $rc = $sth->bind_col($column_number, \e$var_to_bind, \e%attr);
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBbind_columns\fR" 4
.IX Item "bind_columns"
.Vb 1
\&  $rc = $sth->bind_columns(\e%attr, @list_of_refs_to_vars_to_bind);
.Ve
.Sp
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBdump_results\fR" 4
.IX Item "dump_results"
.Vb 1
\&  $rows = $sth->dump_results($maxlen, $lsep, $fsep, $fh);
.Ve
.Sp
Implemented by \s-1DBI\s0, no driver-specific impact. 
.Sh "Statement Handle Attributes"
.IX Subsection "Statement Handle Attributes"
.IP "\fB\s-1NUM_OF_FIELDS\s0\fR  (integer, read\-only)" 4
.IX Item "NUM_OF_FIELDS  (integer, read-only)"
Implemented by \s-1DBI\s0, no driver-specific impact. 
.IP "\fB\s-1NUM_OF_PARAMS\s0\fR  (integer, read\-only)" 4
.IX Item "NUM_OF_PARAMS  (integer, read-only)"
Implemented by \s-1DBI\s0, no driver-specific impact. 
.IP "\fB\s-1NAME\s0\fR  (array\-ref, read\-only)" 4
.IX Item "NAME  (array-ref, read-only)"
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBNAME_lc\fR  (array\-ref, read\-only)" 4
.IX Item "NAME_lc  (array-ref, read-only)"
Implemented by \s-1DBI\s0, no driver-specific impact. 
.IP "\fBNAME_uc\fR  (array\-ref, read\-only)" 4
.IX Item "NAME_uc  (array-ref, read-only)"
Implemented by \s-1DBI\s0, no driver-specific impact. 
.IP "\fB\s-1TYPE\s0\fR  (array\-ref, read\-only)" 4
.IX Item "TYPE  (array-ref, read-only)"
Supported by the driver as proposed by \s-1DBI\s0, with 
the restriction, that the types are InterBase
specific data-types which do not correspond to 
international standards.
.IP "\fB\s-1PRECISION\s0\fR  (array\-ref, read\-only)" 4
.IX Item "PRECISION  (array-ref, read-only)"
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fB\s-1SCALE\s0\fR  (array\-ref, read\-only)" 4
.IX Item "SCALE  (array-ref, read-only)"
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fB\s-1NULLABLE\s0\fR  (array\-ref, read\-only)" 4
.IX Item "NULLABLE  (array-ref, read-only)"
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBCursorName\fR  (string, read\-only)" 4
.IX Item "CursorName  (string, read-only)"
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBStatement\fR  (string, read\-only)" 4
.IX Item "Statement  (string, read-only)"
Supported by the driver as proposed by \s-1DBI\s0. 
.IP "\fBRowCache\fR  (integer, read\-only)" 4
.IX Item "RowCache  (integer, read-only)"
Not supported by the driver. 
.SH "DRIVER SPECIFIC INFORMATION"
.IX Header "DRIVER SPECIFIC INFORMATION"
.Sh "Transactions"
.IX Subsection "Transactions"
The transaction behavior is controlled with the attribute AutoCommit. 
For a complete definition of AutoCommit please refer to the \s-1DBI\s0 documentation. 
.PP
According to the \s-1DBI\s0 specification the default for AutoCommit is \s-1TRUE\s0. 
In this mode, any change to the database becomes valid immediately. Any 
\&\fIcommit()\fR or \fIrollback()\fR will be rejected. 
.PP
If AutoCommit is switched\-off, immediately a transaction will be started.
A \fIrollback()\fR will rollback and close the active transaction, then implicitly 
start a new transaction. A disconnect will issue a rollback. 
.PP
InterBase provides fine control over transaction behavior, where users can
specify the access mode, the isolation level, the lock resolution, and the 
table reservation (for a specified table). For this purpose,
\&\f(CW\*(C`ib_set_tx_param()\*(C'\fR database handle method is available. 
.PP
Upon a successful \f(CW\*(C`connect()\*(C'\fR, these default parameter values will be used
for every \s-1SQL\s0 operation:
.PP
.Vb 3
\&    Access mode:        read/write
\&    Isolation level:    concurrency
\&    Lock resolution:    wait
.Ve
.PP
Any of the above value can be changed using \f(CW\*(C`ib_set_tx_param()\*(C'\fR.
.IP "\fBib_set_tx_param\fR" 4
.IX Item "ib_set_tx_param"
.Vb 6
\& $dbh->func( 
\&    -access_mode     => 'read_write',
\&    -isolation_level => 'read_committed',
\&    -lock_resolution => 'wait',
\&    'ib_set_tx_param'
\& );
.Ve
.Sp
Valid value for \f(CW\*(C`\-access_mode\*(C'\fR is \f(CW\*(C`read_write\*(C'\fR, or \f(CW\*(C`read_only\*(C'\fR. 
Valid value for \f(CW\*(C`\-lock_resolution\*(C'\fR is \f(CW\*(C`wait\*(C'\fR, or \f(CW\*(C`no_wait\*(C'\fR.
\&\f(CW\*(C`\-isolation_level\*(C'\fR may be: \f(CW\*(C`read_committed\*(C'\fR, \f(CW\*(C`snapshot\*(C'\fR,
\&\f(CW\*(C`snapshot_table_stability\*(C'\fR. If \f(CW\*(C`read_committed\*(C'\fR is to be used with
\&\f(CW\*(C`record_version\*(C'\fR or \f(CW\*(C`no_record_version\*(C'\fR, then they should be inside an
anonymous array:
.Sp
.Vb 4
\& $dbh->func( 
\&    -isolation_level => ['read_committed', 'record_version'],
\&    'ib_set_tx_param'
\& );
.Ve
.Sp
Table reservation is supported since \f(CW\*(C`DBD::InterBase 0.30\*(C'\fR. Names of the
tables to reserve as well as their reservation params/values are specified
inside a hashref, which is then passed as the value of \f(CW\*(C`\-reserving\*(C'\fR.
.Sp
The following example reserves \f(CW\*(C`foo_table\*(C'\fR with \f(CW\*(C`read\*(C'\fR lock and \f(CW\*(C`bar_table\*(C'\fR 
with \f(CW\*(C`read\*(C'\fR lock and \f(CW\*(C`protected\*(C'\fR access:
.Sp
.Vb 16
\& $dbh->func(
\&    -access_mode     => 'read_write',
\&    -isolation_level => 'read_committed',
\&    -lock_resolution => 'wait',
\&    -reserving       =>
\&        {
\&            foo_table => {
\&                lock    => 'read',
\&            },
\&            bar_table => {
\&                lock    => 'read',
\&                access  => 'protected',
\&            },
\&        },
\&    'ib_set_tx_param'
\& );
.Ve
.Sp
Possible table reservation parameters are:
.RS 4
.ie n .IP """access"" (optional)" 4
.el .IP "\f(CWaccess\fR (optional)" 4
.IX Item "access (optional)"
Valid values are \f(CW\*(C`shared\*(C'\fR or \f(CW\*(C`protected\*(C'\fR.
.ie n .IP """lock"" (required)" 4
.el .IP "\f(CWlock\fR (required)" 4
.IX Item "lock (required)"
Valid values are \f(CW\*(C`read\*(C'\fR or \f(CW\*(C`write\*(C'\fR.
.RE
.RS 4
.Sp
Under \f(CW\*(C`AutoCommit\*(C'\fR mode, invoking this method doesn't only change the
transaction parameters (as with \f(CW\*(C`AutoCommit\*(C'\fR off), but also commits the
current transaction. The new transaction parameters will be used in
any newly started transaction. 
.Sp
\&\f(CW\*(C`ib_set_tx_param()\*(C'\fR can also be invoked with no parameter in which it resets
transaction parameters to the default value.
.RE
.Sh "\s-1DATE\s0, \s-1TIME\s0, and \s-1TIMESTAMP\s0 Formats"
.IX Subsection "DATE, TIME, and TIMESTAMP Formats"
\&\f(CW\*(C`DBD::InterBase\*(C'\fR supports various formats for query results of \s-1DATE\s0, \s-1TIME\s0,
and \s-1TIMESTAMP\s0 types. 
.PP
By default, it uses \*(L"%c\*(R" for \s-1TIMESTAMP\s0, \*(L"%x\*(R" for \s-1DATE\s0, and \*(L"%X\*(R" for \s-1TIME\s0,
and pass them to \s-1ANSI\s0 C's \fIstrftime()\fR function to format your query results.
These values are respectively stored in ib_timestampformat, ib_dateformat,
and ib_timeformat attributes, and may be changed in two ways:
.ie n .IP "\(bu At $dbh level" 4
.el .IP "\(bu At \f(CW$dbh\fR level" 4
.IX Item "At $dbh level"
This replaces the default values. Example:
.Sp
.Vb 3
\& $dbh->{ib_timestampformat} = '%m-%d-%Y %H:%M';
\& $dbh->{ib_dateformat} = '%m-%d-%Y';
\& $dbh->{ib_timeformat} = '%H:%M';
.Ve
.ie n .IP "\(bu At $sth level" 4
.el .IP "\(bu At \f(CW$sth\fR level" 4
.IX Item "At $sth level"
This overrides the default values only for the currently prepared statement. Example:
.Sp
.Vb 7
\& $attr = {
\&    ib_timestampformat => '%m-%d-%Y %H:%M',
\&    ib_dateformat => '%m-%d-%Y',
\&    ib_timeformat => '%H:%M',
\& };
\& # then, pass it to prepare() method. 
\& $sth = $dbh->prepare($sql, $attr);
.Ve
.PP
Since locale settings affect the result of \fIstrftime()\fR, if your application
is designed to be portable across different locales, you may consider using these
two special formats: '\s-1TM\s0' and '\s-1ISO\s0'. \f(CW\*(C`TM\*(C'\fR returns a 9\-element list, much like
Perl's \fIlocaltime()\fR. The \f(CW\*(C`ISO\*(C'\fR format applies \fIsprintf()\fR's pattern
\&\*(L"%04d\-%02d\-%02d \f(CW%02d:\fR%02d:%02d.%04d\*(R" for \s-1TIMESTAMP\s0, \*(L"%04d\-%02d\-%02d\*(R" for
\&\s-1DATE\s0, and \*(L"%02d:%02d:%02d.%04d\*(R" for \s-1TIME\s0. 
.PP
\&\f(CW\*(C`$dbh\->{ib_time_all}\*(C'\fR can be used to specify all of the three formats at
once. Example:
.PP
.Vb 1
\& $dbh->{ib_time_all} = 'TM';
.Ve
.Sh "Using Event Alerter"
.IX Subsection "Using Event Alerter"
This new feature is experimental and subjects to change. 
.ie n .IP """ib_init_event""" 4
.el .IP "\f(CWib_init_event\fR" 4
.IX Item "ib_init_event"
.Vb 1
\& $evh = $dbh->func(@event_names, 'ib_init_event');
.Ve
.Sp
Initialize an event handle from several event names.
.ie n .IP """ib_wait_event""" 4
.el .IP "\f(CWib_wait_event\fR" 4
.IX Item "ib_wait_event"
.Vb 1
\& $dbh->func($evh, 'ib_wait_event');
.Ve
.Sp
Wait synchronously for particular events registered via event handle \f(CW$evh\fR.
.ie n .IP """ib_register_callback""" 4
.el .IP "\f(CWib_register_callback\fR" 4
.IX Item "ib_register_callback"
.Vb 1
\& $dbh->func($evh, sub { print "callback..\en" }, 'ib_register_callback');
.Ve
.Sp
Register a callback for asynchronous wait.
.ie n .IP """ib_reinit_event""" 4
.el .IP "\f(CWib_reinit_event\fR" 4
.IX Item "ib_reinit_event"
.Vb 1
\& $dbh->func($evh, 'ib_reinit_event');
.Ve
.Sp
Reinitialize event handle.
.Sh "Retrieving Firebird/InterBase specific information"
.IX Subsection "Retrieving Firebird/InterBase specific information"
.ie n .IP """ib_database_info""" 4
.el .IP "\f(CWib_database_info\fR" 4
.IX Item "ib_database_info"
.Vb 2
\& $hash_ref = $dbh->func(@info, 'ib_database_info');
\& $hash_ref = $dbh->func([@info], 'ib_database_info');
.Ve
.Sp
Retrieve database information from current connection. 
.ie n .IP """ib_plan""" 4
.el .IP "\f(CWib_plan\fR" 4
.IX Item "ib_plan"
.Vb 1
\& $plan = $sth->func('ib_plan');
.Ve
.Sp
Retrieve query plan from a prepared \s-1SQL\s0 statement. 
.Sp
.Vb 2
\& my $sth = $dbh->prepare('SELECT * FROM foo');
\& print $sth->func('ib_plan'); # PLAN (FOO NATURAL)
.Ve
.Sh "Obsolete Features"
.IX Subsection "Obsolete Features"
.IP "Private Method" 4
.IX Item "Private Method"
\&\f(CW\*(C`set_tx_param()\*(C'\fR is obsoleted by \f(CW\*(C`ib_set_tx_param()\*(C'\fR.
.Sh "Unsupported \s-1SQL\s0 Statements"
.IX Subsection "Unsupported SQL Statements"
Here is a list of \s-1SQL\s0 statements which can't be used. But this shouldn't be a 
problem, because their functionality are already provided by the \s-1DBI\s0 methods.
.IP "\(bu \s-1SET\s0 \s-1TRANSACTION\s0" 4
.IX Item "SET TRANSACTION"
Use \f(CW\*(C`$dbh\-\*(C'\fRfunc(..., 'set_tx_param')> instead.
.IP "\(bu \s-1DESCRIBE\s0" 4
.IX Item "DESCRIBE"
Provides information about columns that are retrieved by a \s-1DSQL\s0 statement,
or about placeholders in a statement. This functionality is supported by the
driver, and transparent for users. Column names are available via
\&\f(CW$sth\fR\->{\s-1NAME\s0} attributes.
.IP "\(bu \s-1EXECUTE\s0 \s-1IMMEDIATE\s0" 4
.IX Item "EXECUTE IMMEDIATE"
Calling \fIdo()\fR method without bind value(s) will do the same.
.IP "\(bu \s-1CLOSE\s0, \s-1OPEN\s0, \s-1DECLARE\s0 \s-1CURSOR\s0" 4
.IX Item "CLOSE, OPEN, DECLARE CURSOR"
$sth\->{CursorName} is automagically available upon executing a \*(L"\s-1SELECT\s0 .. \s-1FOR\s0
\&\s-1UPDATE\s0\*(R" statement. A cursor is closed after the last \fIfetch()\fR, or by calling
\&\f(CW$sth\fR\->\fIfinish()\fR. 
.IP "\(bu \s-1PREPARE\s0, \s-1EXECUTE\s0, \s-1FETCH\s0" 4
.IX Item "PREPARE, EXECUTE, FETCH"
Similar functionalities are obtained by using \fIprepare()\fR, \fIexecute()\fR, and 
\&\fIfetch()\fR methods.
.Sh "Compatibility with \s-1DBI\s0 Extension modules"
.IX Subsection "Compatibility with DBI Extension modules"
\&\f(CW\*(C`DBD::InterBase\*(C'\fR is known to work with \f(CW\*(C`DBIx::Recordset\*(C'\fR 0.21, and
\&\f(CW\*(C`Apache::DBI\*(C'\fR 0.87. Yuri Vasiliev <\fIyuri.vasiliev@targuscom.com\fR> reported 
successful usage with Apache::AuthDBI (part of \f(CW\*(C`Apache::DBI\*(C'\fR 0.87 
distribution).
.PP
The driver is untested with \f(CW\*(C`Apache::Session::DBI\*(C'\fR. Doesn't work with 
\&\f(CW\*(C`Tie::DBI\*(C'\fR. \f(CW\*(C`Tie::DBI\*(C'\fR calls \f(CW$dbh\fR\->prepare(\*(L"\s-1LISTFIELDS\s0 \f(CW$table_name\fR\*(R") on 
which InterBase fails to parse. I think that the call should be made within 
an eval block.
.SH "TESTED PLATFORMS"
.IX Header "TESTED PLATFORMS"
.Sh "Client"
.IX Subsection "Client"
.IP "Linux" 4
.IX Item "Linux"
.PD 0
.IP "FreeBSD" 4
.IX Item "FreeBSD"
.IP "\s-1SPARC\s0 Solaris" 4
.IX Item "SPARC Solaris"
.IP "Win32" 4
.IX Item "Win32"
.PD
.Sh "Server"
.IX Subsection "Server"
.IP "InterBase 6.0/6.01 \s-1SS\s0 and Classic for Linux" 4
.IX Item "InterBase 6.0/6.01 SS and Classic for Linux"
.PD 0
.IP "InterBase 6.0/6.01 for Windows, FreeBSD, \s-1SPARC\s0 Solaris" 4
.IX Item "InterBase 6.0/6.01 for Windows, FreeBSD, SPARC Solaris"
.IP "Firebird 1.0 Final \s-1SS\s0 for Windows, Linux, \s-1SPARC\s0 Solaris" 4
.IX Item "Firebird 1.0 Final SS for Windows, Linux, SPARC Solaris"
.IP "Firebird 1.5 \s-1RC7\s0 for Windows, Linux" 4
.IX Item "Firebird 1.5 RC7 for Windows, Linux"
.IP "Firebird 1.5 Final for Linux" 4
.IX Item "Firebird 1.5 Final for Linux"
.PD
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu \s-1DBI\s0 by Tim Bunce <Tim.Bunce@pobox.com>" 4
.IX Item "DBI by Tim Bunce <Tim.Bunce@pobox.com>"
.PD 0
.IP "\(bu DBD::InterBase by Edwin Pratomo <edpratomo@cpan.org> and Daniel Ritz <daniel.ritz@gmx.ch>." 4
.IX Item "DBD::InterBase by Edwin Pratomo <edpratomo@cpan.org> and Daniel Ritz <daniel.ritz@gmx.ch>."
.PD
This module is originally based on the work of Bill Karwin's IBPerl.
.SH "BUGS/LIMITATIONS"
.IX Header "BUGS/LIMITATIONS"
No bugs known at this time. But there are some limitations:
.IP "\(bu Arrays are not (yet) supported" 4
.IX Item "Arrays are not (yet) supported"
.PD 0
.IP "\(bu Read/Write \s-1BLOB\s0 fields block by block not (yet) supported. The maximum size of a \s-1BLOB\s0 read/write is hardcoded to about 1MB." 4
.IX Item "Read/Write BLOB fields block by block not (yet) supported. The maximum size of a BLOB read/write is hardcoded to about 1MB."
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1\fIDBI\s0\fR\|(3).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
The DBD::InterBase module is Copyright (c) 1999\-2004 Edwin Pratomo.
Portions Copyright (c) 2001\-2003  Daniel Ritz.
.PP
The DBD::InterBase module is free software. 
You may distribute under the terms of either the \s-1GNU\s0 General Public
License or the Artistic License, as specified in the Perl \s-1README\s0 file,
with the exception that it cannot be placed on a CD-ROM or similar media
for commercial distribution without the prior approval of the author.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
An attempt to enumerate all who have contributed patches (may misses some):
Igor Klingen, Sergey Skvortsov, Ilya Verlinsky, Pavel Zheltouhov, Peter
Wilkinson, Mark D. Anderson, Michael Samanov, Michael Arnett, Flemming
Frandsen, Mike Shoyher, Christiaan Lademann. 
